###我们需要配置 3 个方面的内容： ###
#1、根目录（级别和目的地）；   
#2、目的地（控制台、文件等等）；   
#3、输出样式。

#Logger -   日志写出器  ，供程序员输出日志信息  
#Appender -    日志目的地  ，把格式化好的日志信息输出到指定的地方去  
#Layout -    日志格式化器  ，用来把程序员的  logging request  格式化成字符串  
###

#配置根  Logger  ，其语法为：log4j.rootLogger = [ level ] , appenderName, appenderName, …(appenderName 就是指 日志信息输出到哪个地方)
#level  是日志记录的优先级，分为 OFF 、FATAL 、ERROR 、WARN 、INFO 、DEBUG 、ALL或者您定义的级别。 
#Log4j 建议只使用四个级别 ，优先级从高到低分别是 ERROR 、WARN 、INFO 、DEBUG 。

#配置日志信息输出目的地  Appender  ，其语法为：  
# 　　 log4j.appender.appenderName = fully.qualified.name.of.appender.class. 其中， Log4j 提供的 appender 有以下几种： 
# 　　         1.org.apache.log4j.ConsoleAppender   （控制台）， 
# 　　         2.org.apache.log4j.FileAppender   （文件）， 
# 　　         3.org.apache.log4j.DailyRollingFileAppender   （每天产生一个日志文件），  
# 　　         4.org.apache.log4j.RollingFileAppender   （文件大小到达指定尺寸的时候产生一个      新的文件） 
# 　　         5.org.apache.log4j.WriterAppender   （将日志信息以流格式发送到任意指定的地方）

#1.ConsoleAppender  选项 
#                     Threshold=WARN: 指定日志消息的输出最低层次。 
#                    ImmediateFlush=true: 默认值是 true, 意谓着所有的消息都会被立即输出。 
#                    Target=System.err ：默认情况下是： System.out, 指定输出控制台 
#              2.FileAppender   选项 
#                     Threshold=WARN: 指定日志消息的输出最低层次。 
#                    ImmediateFlush=true: 默认值是 true, 意谓着所有的消息都会被立即输出。 
#                    File=mylog.txt: 指定消息输出到 mylog.txt 文件。 
#                    Append=false: 默认值是 true, 即将消息增加到指定文件中， false 指将消息覆盖指定的文件内容。 
#            3.DailyRollingFileAppender   选项 
#                     Threshold=WARN: 指定日志消息的输出最低层次。 
#                    ImmediateFlush=true: 默认值是 true, 意谓着所有的消息都会被立即输出。 
#                    File=mylog.txt: 指定消息输出到 mylog.txt 文件。 
#                    Append=false: 默认值是 true, 即将消息增加到指定文件中， false 指将消息覆盖指定的文件内容。 
#                    DatePattern='.'yyyy-ww:   每周滚动一次文件  ，即每周产生一个新的文件。当然也可以指定按月、周、天、时和分。即对应的格式如下： 
#                    1)'.'yyyy-MM:  每月 
#                    2)'.'yyyy-ww:  每周  
#                     3)'.'yyyy-MM-dd:    每天 
#                      4)'.'yyyy-MM-dd-a:  每天两次 
#                    5)'.'yyyy-MM-dd-HH:  每小时 
#                    6)'.'yyyy-MM-dd-HH-mm:  每分钟 
#            4.RollingFileAppender   选项 
#                    Threshold=WARN: 指定日志消息的输出最低层次。 
#                    ImmediateFlush=true: 默认值是 true, 意谓着所有的消息都会被立即输出。 
#                    File=mylog.txt: 指定消息输出到 mylog.txt 文件。 
#                    Append=false: 默认值是 true, 即将消息增加到指定文件中， false 指将消息覆盖指定的文件内容。 
#                   MaxFileSize=100KB:  后缀可以是 KB, MB  或者是 GB.  在日志文件到达该大小时，将会自动滚动，即将原来的内容移到 mylog.log.1 文件。 
#                    MaxBackupIndex=2: 指定可以产生的滚动文件的最大数。 

#配置日志信息的格式（布局），其语法为：  
# 　　 log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class
# 　　其中， Log4j 提供的 layout 有以 e 几种： 
# 　　         1.org.apache.log4j.HTMLLayout   （以 HTML 表格形式布局）， 
# 　　         2.org.apache.log4j.PatternLayout   （可以灵活地指定布局模式）， 
# 　　         3.org.apache.log4j.SimpleLayout   （包含日志信息的级别和信息字符串）， 
# 　　         4.org.apache.log4j.TTCCLayout   （包含日志产生的时间、线程、类别等等信息） 
# 　　 Log4J 采用类似 C 语言中的 printf 函数的打印格式格式化日志信息，打印参数如下： %m  输出代码中指定的消息 
# 　　 %p  输出优先级，即 DEBUG ， INFO ， WARN ， ERROR ， FATAL
# 　　 %r  输出自应用启动到输出该 log 信息耗费的毫秒数 
# 　　 %c  输出所属的类目，通常就是所在类的全名 
# 　　 %t  输出产生该日志事件的线程名 
# 　　 %n  输出一个回车换行符， Windows 平台为 “rn” ， Unix 平台为 “n”
# 　　 %d  输出日志时间点的日期或时间，默认格式为 ISO8601 ，也可以在其后指定格式，比如： %d{yyy MMM dd HH:mm:ss,SSS} ，输出类似： 2002 年 10 月 18 日 22 ： 10 ： 28 ， 921
# 　　 %l  输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例： Testlog4.main(TestLog4.java:10) 

### set log levels ###
log4j.rootLogger = DEBUG, stdout, debuglog, errorlog, MAIL
log4j.addivity.org.apache=true
### 输出到控制台 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.Threshold = INFO
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n
 
### 输出到日志文件 ###
log4j.appender.debuglog = org.apache.log4j.DailyRollingFileAppender
log4j.appender.debuglog.File = E:/logs/log_debug.txt
log4j.appender.debuglog.Append = true
log4j.appender.debuglog.Threshold = DEBUG
log4j.appender.debuglog.DatePattern='.'yyyy-MM-dd
log4j.appender.debuglog.layout = org.apache.log4j.PatternLayout
log4j.appender.debuglog.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n
 
### 保存异常信息到单独文件 ###
log4j.appender.errorlog = org.apache.log4j.DailyRollingFileAppender
log4j.appender.errorlog.File = E:/logs/log_error.txt
log4j.appender.errorlog.Append = true
log4j.appender.errorlog.Threshold = ERROR
log4j.appender.debuglog.DatePattern='.'yyyy-MM-dd
log4j.appender.errorlog.layout = org.apache.log4j.PatternLayout
log4j.appender.errorlog.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

### 发送日志给邮件(默认ERROR以上级别才会发送邮件) ###
#log4j的邮件发送appender，如果有必要你可以写自己的appender 
log4j.appender.MAIL=com.rogue.frame.log.Log4jIMSMTPAppender
#发送邮件的级别
log4j.appender.MAIL.Threshold=ERROR
#缓存文件大小，日志达到10k时发送Email
log4j.appender.MAIL.BufferSize=1024
#SMTP邮件发送服务器地址
log4j.appender.MAIL.SMTPHost=smtp.163.com
#SMTP发送认证的帐号名  
#异常：553 authentication is required,smtp12,EMCowEC5oHeiVy5Uh4FbAg--.351S2 1412323234 原因：0x800CCC78错误表明不明的寄件者，或邮件回复（reply-to）地址不正确。可能是由于Outlookexpress中未勾选“我的服务器要求身份验证”。
#解决方案：1、进行STMP认证2、检查用户名和邮件地址是否输入完整的邮箱账号（前后不能有空格）
log4j.appender.MAIL.SMTPUsername=lb7f521@163.com
#SMTP发送认证帐号的密码  
log4j.appender.MAIL.SMTPPassword=861018099
#是否打印调试信息，如果选true，则会输出和SMTP之间的握手等详细信息  
log4j.appender.MAIL.SMTPDebug=false
#邮件主题  (如果是中文需要用native2ascii工具或在线native2ascii将其转为Unicode) 下面主题的意思是：Log4j提醒您：系统发生严重错误
log4j.appender.MAIL.Subject=Log4j\u63d0\u9192\u60a8\uff1a\u7cfb\u7edf\u53d1\u751f\u4e25\u91cd\u9519\u8bef
#发送邮件的邮箱帐号 
log4j.appender.MAIL.From=lb7f521@163.com
#发送到什么邮箱，如果要发送给多个邮箱，则用逗号分隔；  
#如果需要发副本给某人，则加入下列行  
#log4j.appender.MAIL.Bcc=xxx@xxx.xxx
log4j.appender.MAIL.To=861018099@qq.com
#为了发送比ERROR更低级别的信息，需设置EvaluatorClass属性实现TriggeringEventEvaluator接口
log4j.appender.MAIL.EvaluatorClass=com.rogue.frame.log.Log4jEventEvaluator
log4j.appender.MAIL.layout=com.rogue.frame.log.Log4jHTMLLayOut
#log4j.appender.MAIL.layout.ConversionPattern=%d - %c -%-4r [%t] %-5p %c %x - %m%n